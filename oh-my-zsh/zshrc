# Oh-My-Zsh Configuration
ZSH_THEME="smith"               # Set name of the theme to load.
COMPLETION_WAITING_DOTS="true"  # Display red dots whilst waiting for completion.
plugins=(docker docker-compose git node tmuxinator tmux)

# Language Preferences
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8

# Setup PATH
export PATH="/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin:$PATH"
export PATH=${PATH}:~/.composer/vendor/bin
if [ -d "$HOME/.bin" ]; then # Include private bin if exists
  PATH="$HOME/.bin:$PATH"
fi

# Set correct TERM for plain shell and tmux
export TERM='xterm-256color'

# Need that neovim love
export EDITOR='nvim'
export VISUAL='nvim'
alias vim="nvim"

# OS dependent configurations
# darwin = osx
if [[ $OSTYPE =~ "darwin" ]]; then

  # Application Specific Variables
  export ANDROID_HOME=$HOME/Library/Android/sdk
  export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
  #export JAVA_HOME="$(/usr/libexec/java_home -v 1.8)"
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export EVENT_NOKQUEUE=1 # Fixes some bug in Tmux on MaxOS Sierra

  # Useful system shortcuts
  alias flush="dscacheutil -flushcache" # Flush Directory Service cache
  alias fs="stat -f \"%z bytes\""   # Get friendly formatted filesize
  alias emptyTrash="sudo rm -rfv /Volumes/*/.Trashes; rm -rfv ~/.Trash" # includes mounted volumes
  alias hideDesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
  alias showDesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
  alias hideHiddenFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'
  alias showHiddenFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'

  # Aliases
  #alias ls="ls --color=auto --group-directories-first"
  alias mux="tmuxinator"

  # This ugly section of code gets GPG and GPG-AGENT to work on MacOS
  unset SSH_AGENT_PID
  if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
    export SSH_AUTH_SOCK=$HOME/.gnupg/S.gpg-agent.ssh
  fi
  GPG_TTY=$(tty)
  export GPG_TTY
  if [ -f "${HOME}/.gpg-agent-info" ]; then
    . "${HOME}/.gpg-agent-info"
    export GPG_AGENT_INFO
    export SSH_AUTH_SOCK
  fi
  # There is no straight forward way to detect if gpg-agent is running. If you try to run 
  # gpg-agent while it's already running, it displays an annoying error message whenever
  # a new terminal session is opened. So work around this, I'm piping everything from
  # gpg-agent to /dev/null to get rid of the message and then check the exit code to
  # see if it has already been running.
  if ! gpg-agent /bye > /dev/null 2>&1; then
    eval $(gpg-agent --daemon)
  fi

elif [[ $OSTYPE == "linux-gnu" ]]; then

fi

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
source $ZSH/oh-my-zsh.sh
