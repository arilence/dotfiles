" Plugins
" =======

" Auto-install Plug.vim
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'cideM/yui'                            " Current colorscheme
Plug 'lifepillar/vim-colortemplate'         " Used in colorscheme making
Plug 'sheerun/vim-polyglot'                 " Provides syntax highlighting for many languages
Plug 'mhinz/vim-signify'                    " Show git status in the sidebar
Plug 'editorconfig/editorconfig-vim'        " Auto change space/tab indentation per project
Plug 'christoomey/vim-tmux-navigator'       " Smart pane switching with vim and tmux
Plug 'tmux-plugins/vim-tmux-focus-events'   " Makes focus events work in tmux so vim can auto refresh file
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'                     " File search imo the better Ctrl-P
Plug 'rust-lang/rust.vim'

if has('nvim')
  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/defx.nvim'
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
call plug#end()

" Colorssss
" =========
set t_Co=256              " Enable 256 colors
syntax on                 " Syntax Highlighting
syntax enable
if &term =~ '256color' | set t_ut= | endif " Disable Background Color Erase (tmux)

" Credit joshdick
" Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
" (see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (has("nvim"))
  " For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
" For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
" Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
    set termguicolors
endif
                              "
" Plug.vim removes `~/.vim` from the runtimepath.
" Must be set BEFORE `colorscheme` to work.
" This is needed when using vim-colortemplate to make colorschemes.
set runtimepath+=~/.vim

" Only apply the colorscheme if it's available
try
colorscheme mine
set background=light
catch
endtry

" General Config
" ==============
set encoding=utf-8            " Always use utf-8
set clipboard=unnamed         " Enables use of system clipboard
set hidden                    " Buffers can hide in background
set history=1000              " Remember more commands & searches
set undolevels=1000           " Remember many levels of undo
set number                    " Show line numbers
set mouse=n                   " Enable mouse in only normal mode
set noruler                   " Removes cursor location in bottom right
set laststatus=1              " Only show the status bar when more than 1 tab exists
set splitbelow                " Opens horizontal split below current window
set splitright                " Opens vertical split right of current window
set title                     " Auto update title with filename
set autoread                  " Reload files when changed on disk
set incsearch                 " Search immediately after each character
set hlsearch                  " Highlight searches by default
set backspace=2               " Default vim backspace is weird. It won't let you
                              " delete certain things while in insert mode. This
                              " makes backspace workd like typical editors
set ignorecase                " Ignore case when searching...
set smartcase                 " unless the pattern contains an uppercase letter
                              " which in that case it becomes case-sensitive

" Start scrolling when we're getting close to margins
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" I actually don't know what these affect, but I'm too
" afraid to remove it cause it looks important LOL
set wildignore+=*.swp,*.bak,*.pyc,*.class
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store,*/vendor
set wildmenu
set wildmode=longest,list,full

" Support resizing in tmux
if exists('$TMUX') && !has('nvim')
  set ttymouse=xterm2
endif

" Indentation and Display
" =======================
filetype plugin indent on
set nowrap                    " Disable wordwrap
set list                      " Show whitespace
set listchars=tab:â–¸\ ,trail:. " Set visible whitespace character indicators

" Use 4 Space characters for each indent
" This will be overridden by any .editorconfig settings
set tabstop=4
set shiftwidth=4
set softtabstop=0
set expandtab
set smarttab

" Windows Plz
" ============
scriptencoding utf-8          " Need this for 'listchars' to work under windows
let $LANG='en'                " Avoid garbage for foreign chars on windows
set nolist                    " Disables $ at the end of lines on windows
set guioptions-=T             " Remove gVim toolbar
set guioptions-=m             " Remove gVim menu bar

" Key Bindings
" ============
" Opens Defx similar to NerdTree
nnoremap <leader>f :Defx<CR>

" Opens Fzf similar to Ctrl-P
nnoremap <C-p> :Files<CR>

" Disables moving the cursor with the arrow keys while in
" normal mode. Originally did this to learn vim locomotion
" and now I just keep it.
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Rust Config
" ===========
let g:rustfmt_autosave = 1
let g:rust_recommended_style = 1

" Deoplete Config
" ===============
let g:deoplete#enable_at_startup = 1
call deoplete#custom#option('smart_case', v:true)
inoremap <expr><C-j> pumvisible()? "\<C-n>" : "\<C-j>"
inoremap <expr><C-k> pumvisible()? "\<C-p>" : "\<C-k>"
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" Fixes bug when using multiple cursors and deoplete auto complete
function g:Multiple_cursors_before()
  call deoplete#custom#buffer_option('auto_complete', v:false)
endfunction
function g:Multiple_cursors_after()
  call deoplete#custom#buffer_option('auto_complete', v:true)
endfunction

" Defx Config
" ===========
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <Enter>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> <BS>
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
endfunction
