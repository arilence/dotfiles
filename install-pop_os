#!/usr/bin/env bash

# TODO: This script should be idempotent.
# i.e. Running the command multiple times should result in the same outcome.

# Request sudo for later and then keep-alive as long as script is running
sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

sudo apt-get update

# create a startup applications folder for later
mkdir -p $HOME/.config/autostart

# symlink custom scripts
mkdir -p $HOME/.local/bin
ln -sf $PWD/bin/* $HOME/.local/bin/

# install nerd font
NERD_FONT_ARCHIVE="GeistMono.tar.xz"
NERD_FONT_DIR="GeistMono"
NERD_FONT_NAME="GeistMono Nerd Font Mono"
mkdir -p $HOME/.local/share/fonts
if command -v fc-list &> /dev/null && ! fc-list | grep -qi "$NERD_FONT_NAME"; then
  echo "$NERD_FONT_NAME font not found. Installing..."
  # -J is for .tar.xz | -z is for .tar.gz
  curl -sL "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/$NERD_FONT_ARCHIVE" | tar --one-top-level="$NERD_FONT_DIR" -xJf - -C $HOME/.local/share/fonts
fi

# 1password
if ! command -v 1password &> /dev/null && ! test -f /usr/bin/1password; then
    echo "Please install 1password"
    exit 1
fi
if ! command -v op &> /dev/null; then
    sudo apt-get install -y 1password-cli
fi
ln -sf $PWD/config/autostart/1password.desktop $HOME/.config/autostart/1password.desktop
export SOPS_AGE_KEY=$(op read "op://Personal/SOPS AGE KEY/password")
if [[ $? -ne 0 || -z "$SOPS_AGE_KEY" ]]; then
    echo "Setting sops key failed, please make sure 1password is running"
    exit 1
fi

# mise.jdx.dev
mkdir -p $HOME/.config/mise
ln -sf $PWD/config/mise/config.toml $HOME/.config/mise/config.toml

if ! command -v mise &> /dev/null && ! test -f $HOME/.local/bin/mise
then
    echo "Mise not found. Installing..."
    curl https://mise.run | sh
fi

# dependencies for tools installed through mise
# erlang
sudo apt-get install -y automake autoconf libncurses-dev libwxgtk-webview3.0-gtk3-dev inotify-tools libssl-dev

# add mise to bashrc
MISE_SEARCH_STRING="mise activate bash"
MISE_INSTALL_STRING="\n# mise.jdx.dev\neval \"\$(~/.local/bin/mise activate bash)\""
if ! grep -qiF "$MISE_SEARCH_STRING" $HOME/.bashrc
then
    echo -e $MISE_INSTALL_STRING >> $HOME/.bashrc
    eval "$(~/.local/bin/mise activate bash)"
    ~/.local/bin/mise trust $PWD
    ~/.local/bin/mise install
fi

# git
mkdir -p $HOME/.config/git
sops --decrypt $PWD/config/git/gitlocal.common.sops.ini > $HOME/.config/git/gitlocal-common
sops --decrypt $PWD/config/git/gitlocal.linux.sops.ini > $HOME/.config/git/gitlocal
ln -sf $PWD/config/git/gitconfig $HOME/.config/git/config
ln -sf $PWD/config/git/gitignore $HOME/.config/git/ignore

# neovim
if ! command -v nvim &> /dev/null && ! test -d /opt/nvim-linux-x86_64
then
    echo "Neovim not found. Installing..."
    sudo rm -rf /opt/nvim
    curl -sL "https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz" | sudo sh -c 'tar -xzf - -C /opt'
fi

# add neovim to bashrc
NEOVIM_SEARCH_STRING="/opt/nvim-linux-x86_64/bin"
NEOVIM_INSTALL_STRING="\n# neovim\nexport PATH=\"\$PATH:/opt/nvim-linux-x86_64/bin\""
if ! grep -qiF "$NEOVIM_SEARCH_STRING" $HOME/.bashrc
then
    echo -e $NEOVIM_INSTALL_STRING >> $HOME/.bashrc
    export PATH="$PATH:/opt/nvim-linux-x86_64/bin"
fi

# editorconfig
ln -sf $PWD/config/editorconfig $HOME/.editorconfig

# visual studio code
mkdir -p $HOME/.config/Code/User
ln -sf $PWD/config/vs-code/keybindings.json $HOME/.config/Code/User/keybindings.json
ln -sf $PWD/config/vs-code/settings.json $HOME/.config/Code/User/settings.json

if ! command -v code &> /dev/null && ! test -f /usr/bin/code; then
    echo "Vscode not found. Installing..."
    curl -o /tmp/vscode.deb -sL "https://go.microsoft.com/fwlink/?LinkID=760868"
    sudo apt-get install -y /tmp/vscode.deb
    rm /tmp/vscode.deb
fi

# lazygit
mkdir -p $HOME/.config/lazygit
ln -sf $PWD/config/lazygit/config.yml $HOME/.config/lazygit/config.yml

# google gemini cli
mkdir -p $HOME/.gemini
ln -sf $PWD/config/gemini/settings.json $HOME/.gemini/settings.json

# syncthing
# from: https://apt.syncthing.net/
if ! command -v syncthing &> /dev/null && ! test -f /usr/bin/syncthing; then
    sudo mkdir -p /etc/apt/keyrings
    if ! test -f /etc/apt/keyrings/syncthing-archive-keyring.gpg; then
        sudo curl -sL -o /etc/apt/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg
    fi
    if ! test -f /etc/apt/sources.list.d/syncthing.list; then
        echo "deb [signed-by=/etc/apt/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list > /dev/null
    fi
    if ! test -f /etc/apt/preferences.d/syncthing.pref; then
        echo -e "Package: *\nPin: origin apt.syncthing.net\nPin-Priority: 990\n" | sudo tee /etc/apt/preferences.d/syncthing.pref > /dev/null
    fi
    sudo apt-get update
    sudo apt-get install -y syncthing
fi
ln -sf $PWD/config/autostart/syncthing-start.desktop $HOME/.config/autostart/syncthing-start.desktop

# obsidian
if ! command -v obsidian &> /dev/null && ! test -f /usr/bin/obsidian; then
    echo "Obsidian not found. Installing..."
    # TODO: Get the latest instead of hardcoded version
    curl -o /tmp/obsidian.deb -sL "https://github.com/obsidianmd/obsidian-releases/releases/download/v1.8.10/obsidian_1.8.10_amd64.deb"
    sudo apt-get install -y /tmp/obsidian.deb
    rm /tmp/obsidian.deb
fi

# kopia
if ! command -v kopia-ui &> /dev/null && ! test -f /usr/bin/kopia-ui; then
    sudo mkdir -p /etc/apt/keyrings
    if ! test -f /etc/apt/keyrings/kopia-keyring.gpg; then
        curl -s https://kopia.io/signing-key | sudo gpg --dearmor -o /etc/apt/keyrings/kopia-keyring.gpg
    fi
    if ! test -f /etc/apt/sources.list.d/kopia.list; then
        echo "deb [signed-by=/etc/apt/keyrings/kopia-keyring.gpg] http://packages.kopia.io/apt/ stable main" | sudo tee /etc/apt/sources.list.d/kopia.list > /dev/null
    fi
    sudo apt-get update
    sudo apt-get install -y kopia-ui

    # Allows kopia to backup files all files, regardless of permissions.
    # I'm using this to backup docker volume data that may have different permissions from the default user who will be running kopia-ui.
    # This is very dangerous.
    sudo setcap cap_dac_read_search=+ep /opt/KopiaUI/resources/server/kopia
fi

# rofi
if ! command -v rofi &> /dev/null && ! test -f /usr/bin/rofi; then
    echo "Rofi not found. Installing..."
    sudo apt-get install -y rofi
fi
mkdir -p $HOME/.config/rofi
ln -sf $PWD/config/rofi/config.rasi $HOME/.config/rofi/config.rasi

# starship
mkdir -p $HOME/.config/starship
ln -sf $PWD/config/starship/starship.toml $HOME/.config/starship/starship.toml

# zsh / prezto
mkdir -p $HOME/.config/zsh
ln -sf $PWD/config/zsh/zshenv $HOME/.zshenv
# dotglob is required to symlink files that start with a period
shopt -s dotglob
ln -sf $PWD/config/zsh/* $HOME/.config/zsh/
# we unset dotglob now that we're done with it
shopt -u dotglob
# install zsh and prezto
if ! command -v zsh &> /dev/null && ! test -f /usr/bin/zsh; then
    sudo apt-get install -y zsh
fi
if [ ! -d "${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}/.zprezto" ]; then
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}/.zprezto"
fi

# eza
if ! command -v eza &> /dev/null && ! test -f $HOME/.cargo/bin/eza; then
    cargo install eza
fi

# atuin
mkdir -p $HOME/.config/atuin
ln -sf $PWD/config/atuin/config.toml $HOME/.config/atuin/config.toml
if ! command -v atuin &> /dev/null && ! test -f $HOME/.cargo/bin/atuin; then
    cargo install atuin
fi

# ghostty
mkdir -p $HOME/.config/ghostty
ln -sf $PWD/config/ghostty/config $HOME/.config/ghostty/config

# zen browser
if ! flatpak list | grep -qF "app.zen_browser.zen"; then
    echo "Zen Browser not found. Installing..."
    flatpak install -y flathub app.zen_browser.zen
fi

# Missing TMUX and Neovim

# caffeine, choose when the screen should stay on indefinitely
if ! command -v caffeine &> /dev/null && ! test -f /usr/bin/caffeine; then
    sudo apt-get install -y caffeine
fi
ln -sf $PWD/config/autostart/caffeine-indicator.desktop $HOME/.config/autostart/caffeine-indicator.desktop

# Apply Pop_OS specific configuration settings
# Most of these are actually gnome specific, but this is just in case.
if grep -q '^ID=pop$' /etc/os-release; then
  bash $PWD/pop_os/setup.sh
fi

# Change default shell to zsh
CURRENT_SHELL=$(getent passwd $USER | cut "-d:" -f7)
if [ "${CURRENT_SHELL}" != "/bin/zsh" ]; then
    echo "Changing default shell to zsh" && chsh -s /bin/zsh
fi

if ! command -v ghostty &> /dev/null; then
  echo "Reminder to install Ghostty manually"
fi

echo "Done"
